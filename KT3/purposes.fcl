// Block definition (there may be more than one block per file)
FUNCTION_BLOCK purposes

// Define input variables
VAR_INPUT
    cpu_cores : REAL;
    cpu_threads : REAL;
    cpu_tdp : REAL;
    ram_capacity_in_gb : REAL;
    ram_speed : REAL;
    ram_voltage : REAL;
    gpu_memory_in_gb : REAL;
    gpu_clock_in_mhz : REAL;
    psu_output_power : REAL;
    hdd_capacity_in_gb : REAL;
END_VAR

// Define output variable
VAR_OUTPUT
    app_development : REAL;
    gaming : REAL;
    crypto_mining : REAL;
    home : REAL;
    business : REAL;
    hosting : REAL;
END_VAR

// Fuzzify input variable 'cpu_cores'
FUZZIFY cpu_cores
    TERM poor := (2, 1) (4, 1) (6, 0);
    TERM average := (6, 0) (8,1) (16,1) (18,0);
    TERM excellent := (16, 0) (18, 1) (64, 1);
END_FUZZIFY

// Fuzzify input variable 'cpu_threads'
FUZZIFY cpu_threads
    TERM poor := (2, 1) (4, 1) (8, 0);
    TERM average := (8, 0) (12,1) (28,1) (32,0);
    TERM excellent := (32, 0) (80, 1) (128, 1);
END_FUZZIFY

// Fuzzify input variable 'cpu_tdp'
FUZZIFY cpu_tdp
    TERM poor := (5, 1) (45, 1) (60, 0);
    TERM average := (55, 0) (65, 1) (80, 1) (105, 0);
    TERM excellent := (100, 0) (105, 1) (350, 1);
END_FUZZIFY

// Fuzzify input variable 'ram_capacity_in_gb'
FUZZIFY ram_capacity_in_gb
    TERM poor := (1, 1) (4, 1) (6, 0);
    TERM average := (6, 0) (8, 1) (28, 1) (32, 0);
    TERM excellent := (32, 0) (80, 1) (128, 1);
END_FUZZIFY

// Fuzzify input variable 'ram_speed'
FUZZIFY ram_speed
    TERM slow := (400, 1) (600, 1) (1000, 0);
    TERM average := (800, 0) (1000, 1) (1400, 1) (1600, 0);
    TERM fast := (1600, 0) (2400, 1) (4400, 1);
END_FUZZIFY

// Fuzzify input variable 'ram_voltage'
FUZZIFY ram_voltage
    TERM low := (1.2, 1) (1.35, 0);
    TERM normal := (1.35, 0) (1.43, 1) (1.5, 0);
    TERM high := (1.5, 0) (1.65, 1);
END_FUZZIFY

// Fuzzify input variable 'gpu_memory_in_gb'
FUZZIFY gpu_memory_in_gb
    TERM poor := (1, 1) (4, 1) (6, 0);
    TERM average := (6, 0) (8, 1) (10, 1) (12, 0);
    TERM excellent := (12, 0) (14, 1) (24, 1);
END_FUZZIFY

// Fuzzify input variable 'gpu_clock_in_mhz'
FUZZIFY gpu_clock_in_mhz
    TERM poor := (100, 1) (300, 1) (400, 0);
    TERM average := (400, 0) (600, 1) (800, 1) (1200, 0);
    TERM excellent := (1000, 0) (1200, 1) (2200, 1);
END_FUZZIFY

// Fuzzify input variable 'psu_output_power'
FUZZIFY psu_output_power
    TERM poor := (200, 1) (300, 1) (400, 0);
    TERM average := (300, 0) (600, 1) (700, 1) (800, 0);
    TERM excellent := (700, 0) (750, 1) (1200, 1);
END_FUZZIFY

// Fuzzify input variable 'hdd_capacity_in_gb'
FUZZIFY hdd_capacity_in_gb
    TERM poor := (16, 1) (64, 0);
    TERM average := (64, 0) (128, 1) (256, 1) (500, 0);
    TERM excellent := (500, 0) (1000, 1) (2000, 1);
END_FUZZIFY

// Defzzzify output variable 'app_development'
DEFUZZIFY app_development
    TERM poor := (0,0) (15,1) (30,0);
    TERM good := (30,0) (55,1) (80,0);
    TERM excellent := (80,0) (90,1) (100,0);
    // Use 'Center Of Gravity' defuzzification method
    METHOD : COG;
    // Default value is 0 (if no rule activates defuzzifier)
    DEFAULT := 0;
END_DEFUZZIFY

// Defzzzify output variable 'gaming'
DEFUZZIFY gaming
    TERM poor := (0,0) (15,1) (30,0);
    TERM good := (30,0) (55,1) (80,0);
    TERM excellent := (80,0) (90,1) (100,0);
    // Use 'Center Of Gravity' defuzzification method
    METHOD : COG;
    // Default value is 0 (if no rule activates defuzzifier)
    DEFAULT := 0;
END_DEFUZZIFY

// Defzzzify output variable 'crypto_mining'
DEFUZZIFY crypto_mining
    TERM poor := (0,0) (15,1) (30,0);
    TERM good := (30,0) (55,1) (80,0);
    TERM excellent := (80,0) (90,1) (100,0);
    // Use 'Center Of Gravity' defuzzification method
    METHOD : COG;
    // Default value is 0 (if no rule activates defuzzifier)
    DEFAULT := 0;
END_DEFUZZIFY

// Defzzzify output variable 'home'
DEFUZZIFY home
    TERM poor := (0,0) (15,1) (30,0);
    TERM good := (30,0) (55,1) (80,0);
    TERM excellent := (80,0) (90,1) (100,0);
    // Use 'Center Of Gravity' defuzzification method
    METHOD : COG;
    // Default value is 0 (if no rule activates defuzzifier)
    DEFAULT := 0;
END_DEFUZZIFY

// Defzzzify output variable 'business'
DEFUZZIFY business
   TERM poor := (0,0) (15,1) (30,0);
   TERM good := (30,0) (55,1) (80,0);
   TERM excellent := (80,0) (90,1) (100,0);
   // Use 'Center Of Gravity' defuzzification method
   METHOD : COG;
   // Default value is 0 (if no rule activates defuzzifier)
   DEFAULT := 0;
END_DEFUZZIFY

// Defzzzify output variable 'hosting'
DEFUZZIFY hosting
     TERM poor := (0,0) (15,1) (30,0);
     TERM good := (30,0) (55,1) (80,0);
     TERM excellent := (80,0) (90,1) (100,0);
    // Use 'Center Of Gravity' defuzzification method
    METHOD : COG;
    // Default value is 0 (if no rule activates defuzzifier)
    DEFAULT := 0;
END_DEFUZZIFY

RULEBLOCK app_development_rules
    // Use 'min' for 'and' (also implicit use 'max'
    // for 'or' to fulfill DeMorgan's Law)
    AND : MIN;
    // Use 'min' activation method
    ACT : MIN;
    // Use 'max' accumulation method
    ACCU : MAX;

    RULE 1 : IF cpu_cores IS poor
                THEN app_development IS poor;

    RULE 2 : IF cpu_cores IS excellent OR cpu_cores IS average
                THEN app_development IS excellent;

    RULE 3 : IF cpu_threads IS poor
                THEN app_development IS poor;

    RULE 4 : IF cpu_threads IS excellent OR cpu_threads IS average
                THEN app_development IS excellent;

    RULE 5 : IF cpu_tdp IS poor
                THEN app_development IS poor;

    RULE 6 : IF cpu_tdp IS average OR cpu_tdp IS excellent
                THEN app_development IS excellent;

    RULE 7 : IF ram_capacity_in_gb IS poor
                THEN app_development IS poor;

    RULE 8 : IF ram_capacity_in_gb IS average
                THEN app_development IS good;

    RULE 9 : IF ram_capacity_in_gb IS excellent
                THEN app_development IS excellent;

    RULE 10 : IF ram_voltage IS low
                THEN app_development IS poor;

    RULE 11 : IF ram_voltage IS normal
                THEN app_development IS good;

    RULE 12 : IF ram_voltage IS high
                THEN app_development IS excellent;

    RULE 13 : IF ram_speed IS slow
                THEN app_development IS poor;

    RULE 14 : IF ram_speed IS average
                THEN app_development IS good;

    RULE 15 : IF ram_speed IS fast
                THEN app_development IS excellent;

    RULE 16 : IF hdd_capacity_in_gb IS poor
                THEN app_development IS poor;

    RULE 17 : IF hdd_capacity_in_gb IS average
                THEN app_development IS good;

    RULE 18 : IF hdd_capacity_in_gb IS excellent
                 THEN app_development IS excellent;

    RULE 19 : IF gpu_memory_in_gb IS poor OR gpu_memory_in_gb IS average
                THEN app_development IS good;

    RULE 20 : IF gpu_memory_in_gb IS excellent
                THEN app_development IS excellent;

    RULE 21 : IF gpu_clock_in_mhz IS poor
                THEN app_development IS poor;

    RULE 22 : IF gpu_clock_in_mhz IS excellent OR gpu_clock_in_mhz IS average
                THEN app_development IS excellent;

    RULE 23 : IF psu_output_power IS poor
                THEN app_development IS poor;

    RULE 24 : IF psu_output_power IS average OR psu_output_power IS excellent
                THEN app_development IS excellent;

    RULE 25 : IF hdd_capacity_in_gb IS average AND ram_capacity_in_gb IS excellent
                THEN app_development IS excellent;

    RULE 26 : IF cpu_cores IS excellent AND gpu_memory_in_gb IS excellent AND ram_capacity_in_gb IS poor
                THEN app_development IS poor;

    RULE 27 : IF cpu_cores IS average AND gpu_memory_in_gb IS average AND ram_capacity_in_gb IS excellent
                THEN app_development IS excellent;

    RULE 28 : IF cpu_cores IS average AND cpu_threads IS average AND ram_capacity_in_gb IS excellent
                THEN app_development IS excellent;

    RULE 29 : IF cpu_cores IS excellent AND cpu_threads IS average AND ram_capacity_in_gb IS poor
                THEN app_development IS poor;

    RULE 30 : IF cpu_cores IS average AND gpu_memory_in_gb IS average AND ram_speed IS fast
                THEN app_development IS excellent;
END_RULEBLOCK

RULEBLOCK gaming_rules
    // Use 'min' for 'and' (also implicit use 'max'
    // for 'or' to fulfill DeMorgan's Law)
    AND : MIN;
    // Use 'min' activation method
    ACT : MIN;
    // Use 'max' accumulation method
    ACCU : MAX;

    RULE 1 : IF cpu_cores IS average
                THEN gaming IS good;

    RULE 2 : IF cpu_cores IS excellent
                THEN gaming IS excellent;

    RULE 3 : IF cpu_threads IS poor
                THEN gaming IS poor;

    RULE 4 : IF cpu_threads IS excellent
                THEN gaming IS excellent;

    RULE 5 : IF cpu_tdp IS poor
                THEN gaming IS poor;

    RULE 6 : IF cpu_tdp IS average
                THEN gaming IS good;

    RULE 7 : IF cpu_cores IS poor AND cpu_threads IS average
                THEN gaming IS poor;

    RULE 8 : IF cpu_threads IS average AND cpu_tdp IS excellent
                THEN gaming IS good;

    RULE 9 : IF ram_capacity_in_gb IS poor OR ram_capacity_in_gb IS average
                THEN gaming IS poor;

    RULE 10 : IF ram_capacity_in_gb IS excellent
                THEN gaming IS excellent;

    RULE 11 : IF ram_voltage IS low
                THEN gaming IS poor;

    RULE 12 : IF ram_voltage IS normal
                THEN gaming IS good;

    RULE 13 : IF ram_voltage IS high
                THEN gaming IS excellent;

    RULE 14 : IF ram_speed IS slow OR ram_speed IS average
                THEN gaming IS poor;

    RULE 15 : IF ram_speed IS fast
                THEN gaming IS excellent;

    RULE 16 : IF hdd_capacity_in_gb IS poor
                THEN gaming IS poor;

    RULE 17 : IF hdd_capacity_in_gb IS average
                THEN gaming IS good;

    RULE 18 : IF hdd_capacity_in_gb IS excellent
                 THEN gaming IS excellent;

    RULE 19 : IF gpu_memory_in_gb IS poor OR gpu_memory_in_gb IS average
                THEN gaming IS poor;

    RULE 20 : IF gpu_memory_in_gb IS excellent
                THEN gaming IS excellent;

    RULE 21 : IF gpu_clock_in_mhz IS poor OR gpu_clock_in_mhz IS average
                THEN gaming IS poor;

    RULE 22 : IF gpu_clock_in_mhz IS excellent
                THEN gaming IS excellent;

    RULE 23 : IF psu_output_power IS poor
                THEN gaming IS poor;

    RULE 24 : IF psu_output_power IS average
                THEN gaming IS good;

    RULE 25 : IF psu_output_power IS excellent
                THEN gaming IS excellent;

    RULE 26 : IF cpu_cores IS average AND ram_capacity_in_gb IS average AND gpu_memory_in_gb IS poor
                THEN gaming IS poor;

    RULE 27 : IF cpu_cores IS average OR cpu_cores IS excellent AND gpu_memory_in_gb IS excellent
                THEN gaming IS excellent;

    RULE 28 : IF cpu_cores IS average AND cpu_threads IS average AND gpu_memory_in_gb IS poor
                THEN gaming IS poor;

    RULE 29 : IF cpu_cores IS average OR ram_capacity_in_gb IS excellent AND gpu_clock_in_mhz IS average
                THEN gaming IS good;

    RULE 30 : IF cpu_cores IS poor OR ram_capacity_in_gb IS average AND gpu_clock_in_mhz IS average
                THEN gaming IS poor;

END_RULEBLOCK

RULEBLOCK crypto_mining_rules
    // Use 'min' for 'and' (also implicit use 'max'
    // for 'or' to fulfill DeMorgan's Law)
    AND : MIN;
    // Use 'min' activation method
    ACT : MIN;
    // Use 'max' accumulation method
    ACCU : MAX;

    RULE 1 : IF cpu_cores IS poor
                THEN crypto_mining IS good;

    RULE 2 : IF cpu_cores IS excellent OR cpu_cores IS average
                THEN crypto_mining IS excellent;

    RULE 3 : IF cpu_threads IS poor
                THEN crypto_mining IS good;

    RULE 4 : IF cpu_threads IS excellent OR cpu_threads IS average
                THEN crypto_mining IS excellent;

    RULE 5 : IF cpu_tdp IS poor
                THEN crypto_mining IS good;

    RULE 6 : IF cpu_tdp IS average OR cpu_tdp IS excellent
                THEN crypto_mining IS excellent;

    RULE 7 : IF ram_capacity_in_gb IS poor
                THEN crypto_mining IS good;

    RULE 8 : IF ram_capacity_in_gb IS average OR ram_capacity_in_gb IS excellent
                THEN crypto_mining IS excellent;

    RULE 9 : IF ram_voltage IS low
                THEN crypto_mining IS poor;

    RULE 10 : IF ram_voltage IS normal
                THEN crypto_mining IS good;

    RULE 11 : IF ram_voltage IS high
                THEN crypto_mining IS excellent;

    RULE 12 : IF ram_speed IS slow
                THEN crypto_mining IS poor;

    RULE 13 : IF ram_speed IS average
                THEN crypto_mining IS good;

    RULE 14 : IF ram_speed IS fast
                THEN crypto_mining IS excellent;

    RULE 15 : IF hdd_capacity_in_gb IS poor
                THEN crypto_mining IS poor;

    RULE 16 : IF hdd_capacity_in_gb IS average
                THEN crypto_mining IS good;

    RULE 17 : IF hdd_capacity_in_gb IS excellent
                 THEN crypto_mining IS excellent;

    RULE 18 : IF gpu_memory_in_gb IS poor OR gpu_memory_in_gb IS average
                THEN crypto_mining IS poor;

    RULE 19 : IF gpu_memory_in_gb IS excellent
                THEN crypto_mining IS excellent;

    RULE 20 : IF gpu_clock_in_mhz IS poor OR gpu_clock_in_mhz IS average
                THEN crypto_mining IS poor;

    RULE 21 : IF gpu_clock_in_mhz IS excellent
                THEN crypto_mining IS excellent;

    RULE 22 : IF psu_output_power IS poor
                THEN crypto_mining IS poor;

    RULE 23 : IF psu_output_power IS average OR psu_output_power IS excellent
                THEN crypto_mining IS excellent;

    RULE 24 : IF cpu_cores IS excellent AND gpu_memory_in_gb IS excellent AND ram_capacity_in_gb IS average
                THEN crypto_mining IS excellent;

    RULE 25 : IF cpu_cores IS average AND gpu_memory_in_gb IS excellent AND ram_capacity_in_gb IS excellent
                THEN crypto_mining IS excellent;

    RULE 26 : IF cpu_cores IS poor AND cpu_threads IS average AND gpu_memory_in_gb IS excellent
                THEN crypto_mining IS good;

    RULE 27 : IF cpu_cores IS excellent AND cpu_threads IS poor AND gpu_memory_in_gb IS poor
                THEN crypto_mining IS poor;

    RULE 28 : IF cpu_cores IS average AND gpu_memory_in_gb IS average AND ram_speed IS fast
                THEN crypto_mining IS good;

    RULE 29 : IF cpu_cores IS average AND cpu_threads IS poor AND gpu_memory_in_gb IS poor
                THEN crypto_mining IS poor;

    RULE 30 : IF ram_capacity_in_gb IS average AND gpu_clock_in_mhz IS poor AND gpu_memory_in_gb IS poor
                THEN crypto_mining IS poor;

   RULE 31 : IF ram_capacity_in_gb IS average AND gpu_clock_in_mhz IS excellent AND gpu_memory_in_gb IS excellent
                THEN crypto_mining IS excellent;

END_RULEBLOCK

RULEBLOCK home_rules
    // Use 'min' for 'and' (also implicit use 'max'
    // for 'or' to fulfill DeMorgan's Law)
    AND : MIN;
    // Use 'min' activation method
    ACT : MIN;
    // Use 'max' accumulation method
    ACCU : MAX;

    RULE 1 : IF cpu_cores IS poor
                THEN home IS good;

    RULE 2 : IF cpu_cores IS average
                THEN home IS excellent;

    RULE 3 : IF cpu_cores IS excellent
                 THEN home IS poor;

    RULE 4 : IF cpu_threads IS poor
                THEN home IS good;

    RULE 5 : IF cpu_threads IS average
                THEN home IS excellent;

    RULE 6 : IF cpu_threads IS excellent
                 THEN home IS poor;

    RULE 7 : IF cpu_tdp IS poor OR cpu_tdp IS excellent
                THEN home IS poor;

    RULE 8 : IF cpu_tdp IS average
                THEN home IS excellent;

    RULE 9 : IF ram_capacity_in_gb IS poor
                THEN home IS poor;

    RULE 10 : IF ram_capacity_in_gb IS average OR ram_capacity_in_gb IS excellent
                THEN home IS excellent;

    RULE 11 : IF ram_voltage IS low
                THEN home IS poor;

    RULE 12 : IF ram_voltage IS normal OR ram_voltage IS high
                THEN home IS excellent;

    RULE 13 : IF ram_speed IS slow
                THEN home IS poor;

    RULE 14 : IF ram_speed IS average OR ram_speed IS fast
                THEN home IS excellent;

    RULE 15 : IF hdd_capacity_in_gb IS poor
                THEN home IS good;

    RULE 16 : IF hdd_capacity_in_gb IS average
                THEN home IS excellent;

    RULE 17 : IF hdd_capacity_in_gb IS excellent
                 THEN home IS poor;

    RULE 18 : IF gpu_memory_in_gb IS poor
                THEN home IS good;

    RULE 19 : IF gpu_memory_in_gb IS average
                THEN home IS excellent;

    RULE 22 : IF gpu_memory_in_gb IS excellent
                THEN home IS poor;

    RULE 23 : IF gpu_clock_in_mhz IS poor
                THEN home IS good;

    RULE 24 : IF gpu_clock_in_mhz IS average
                THEN home IS excellent;

    RULE 25 : IF gpu_clock_in_mhz IS excellent
                THEN home IS poor;

    RULE 26 : IF psu_output_power IS poor
                THEN home IS good;

    RULE 27 : IF psu_output_power IS average
                THEN home IS excellent;

    RULE 28 : IF psu_output_power IS excellent
                THEN home IS poor;

    RULE 29 : IF cpu_cores IS average AND gpu_memory_in_gb IS poor AND ram_capacity_in_gb IS average
                THEN home IS excellent;

    RULE 30 : IF cpu_cores IS average AND gpu_memory_in_gb IS average AND ram_capacity_in_gb IS excellent
                THEN home IS excellent;

    RULE 31 : IF cpu_cores IS excellent AND cpu_threads IS excellent AND ram_capacity_in_gb IS average
                THEN home IS poor;

    RULE 32 : IF cpu_cores IS poor AND cpu_threads IS average AND ram_capacity_in_gb IS average
                THEN home IS good;

    RULE 33 : IF cpu_cores IS excellent AND psu_output_power IS excellent AND ram_capacity_in_gb IS poor
                THEN home IS poor;

END_RULEBLOCK

RULEBLOCK business_rules
    // Use 'min' for 'and' (also implicit use 'max'
    // for 'or' to fulfill DeMorgan's Law)
    AND : MIN;
    // Use 'min' activation method
    ACT : MIN;
    // Use 'max' accumulation method
    ACCU : MAX;

    RULE 1 : IF cpu_cores IS poor
                THEN business IS poor;

    RULE 2 : IF cpu_cores IS average
                THEN business IS good;

    RULE 3 : IF cpu_cores IS excellent
                 THEN business IS excellent;

    RULE 4 : IF cpu_threads IS poor
                THEN business IS good;

    RULE 5 : IF cpu_threads IS average OR cpu_threads IS excellent
                THEN business IS excellent;

    RULE 6 : IF cpu_tdp IS poor OR cpu_tdp IS excellent
                THEN business IS poor;

    RULE 7 : IF cpu_tdp IS average
                THEN business IS excellent;

    RULE 6 : IF ram_capacity_in_gb IS poor
                THEN business IS poor;

    RULE 9 : IF ram_capacity_in_gb IS average OR ram_capacity_in_gb IS excellent
                THEN business IS excellent;

    RULE 10 : IF ram_voltage IS low
                THEN business IS poor;

    RULE 11 : IF ram_voltage IS normal
                THEN business IS good;

    RULE 12 : IF ram_voltage IS high
                 THEN business IS excellent;

    RULE 13 : IF ram_speed IS slow
                THEN business IS poor;

    RULE 14 : IF ram_speed IS average
                THEN business IS good;

    RULE 15 : IF ram_speed IS fast
                 THEN business IS excellent;

    RULE 16 : IF hdd_capacity_in_gb IS poor
                THEN business IS good;

    RULE 17 : IF hdd_capacity_in_gb IS average
                THEN business IS excellent;

    RULE 18 : IF hdd_capacity_in_gb IS excellent
                 THEN business IS poor;

    RULE 19 : IF gpu_memory_in_gb IS poor
                THEN business IS good;

    RULE 20 : IF gpu_memory_in_gb IS average
                THEN business IS excellent;

    RULE 21 : IF gpu_memory_in_gb IS excellent
                THEN business IS poor;

    RULE 22 : IF gpu_clock_in_mhz IS poor
                THEN business IS good;

    RULE 23 : IF gpu_clock_in_mhz IS average or gpu_clock_in_mhz IS excellent
                THEN business IS excellent;

    RULE 24 : IF psu_output_power IS poor
                THEN business IS poor;

    RULE 25 : IF psu_output_power IS average
                THEN business IS good;

    RULE 26: IF psu_output_power IS excellent
                THEN business IS excellent;

    RULE 27 : IF cpu_cores IS average AND gpu_memory_in_gb IS poor AND ram_capacity_in_gb IS average
                THEN business IS excellent;

    RULE 28 : IF cpu_cores IS average AND gpu_memory_in_gb IS average AND ram_capacity_in_gb IS excellent
                THEN business IS excellent;

    RULE 29 : IF cpu_threads IS average AND gpu_memory_in_gb IS average AND ram_capacity_in_gb IS excellent
                THEN business IS excellent;

    RULE 30 : IF gpu_clock_in_mhz IS poor AND ram_voltage IS normal AND ram_speed IS average
                THEN business IS good;

END_RULEBLOCK

RULEBLOCK hosting_rules
    // Use 'min' for 'and' (also implicit use 'max'
    // for 'or' to fulfill DeMorgan's Law)
    AND : MIN;
    // Use 'min' activation method
    ACT : MIN;
    // Use 'max' accumulation method
    ACCU : MAX;

    RULE 1 : IF cpu_cores IS poor OR cpu_cores IS average
                THEN hosting IS poor;

    RULE 2 : IF cpu_cores IS excellent
                 THEN hosting IS excellent;

    RULE 3 : IF cpu_threads IS poor OR cpu_threads IS average
                THEN hosting IS poor;

    RULE 4 : IF cpu_threads IS excellent
                THEN hosting IS excellent;

    RULE 5 : IF cpu_tdp IS poor OR cpu_tdp IS average
                THEN hosting IS poor;

    RULE 6 : IF cpu_tdp IS average
                 THEN hosting IS poor;

    RULE 7 : IF cpu_tdp IS excellent
                THEN hosting IS excellent;

    RULE 8 : IF ram_capacity_in_gb IS poor
                THEN hosting IS poor;

    RULE 9 : IF ram_capacity_in_gb IS average OR ram_capacity_in_gb IS excellent
                THEN hosting IS excellent;

    RULE 10 : IF ram_voltage IS low
                THEN hosting IS poor;

    RULE 11 : IF ram_voltage IS normal
                THEN hosting IS good;

    RULE 12 : IF ram_voltage IS high
                 THEN hosting IS excellent;

    RULE 13 : IF ram_speed IS slow
                THEN hosting IS poor;

    RULE 14 : IF ram_speed IS average OR ram_speed IS fast
                THEN hosting IS good;

    RULE 15 : IF hdd_capacity_in_gb IS poor
                THEN hosting IS poor;

    RULE 16 : IF hdd_capacity_in_gb IS average OR hdd_capacity_in_gb IS excellent
                THEN hosting IS excellent;

    RULE 17 : IF gpu_memory_in_gb IS poor
                THEN hosting IS good;

    RULE 18 : IF gpu_memory_in_gb IS average
                THEN hosting IS excellent;

    RULE 19 : IF gpu_memory_in_gb IS excellent
                THEN hosting IS poor;

    RULE 20: IF gpu_clock_in_mhz IS poor
                THEN hosting IS good;

    RULE 21 : IF gpu_clock_in_mhz IS average or gpu_clock_in_mhz IS excellent
                THEN hosting IS excellent;

    RULE 22 : IF psu_output_power IS poor
                THEN hosting IS poor;

    RULE 23: IF psu_output_power IS excellent OR psu_output_power IS average
                THEN hosting IS excellent;

    RULE 24 : IF cpu_cores IS average AND gpu_memory_in_gb IS poor AND ram_capacity_in_gb IS poor
                THEN hosting IS poor;

    RULE 25 : IF cpu_threads IS average AND gpu_memory_in_gb IS average AND ram_capacity_in_gb IS excellent
                THEN hosting IS excellent;

    RULE 26 : IF gpu_clock_in_mhz IS poor AND ram_voltage IS normal AND ram_speed IS average
                THEN hosting IS good;

    RULE 27 : IF gpu_clock_in_mhz IS excellent AND ram_voltage IS high AND ram_speed IS fast
                 THEN hosting IS excellent;

    RULE 28 : IF gpu_clock_in_mhz IS average AND ram_voltage IS low AND ram_speed IS slow
                 THEN hosting IS poor;

    RULE 29 : IF hdd_capacity_in_gb IS average AND ram_voltage IS low AND ram_speed IS slow AND ram_capacity_in_gb IS excellent
                 THEN hosting IS good;

    RULE 30 : IF cpu_cores IS excellent AND gpu_memory_in_gb IS average AND ram_capacity_in_gb IS excellent
                 THEN hosting IS excellent;


END_RULEBLOCK

END_FUNCTION_BLOCK