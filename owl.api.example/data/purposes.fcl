// Block definition (there may be more than one block per file)
FUNCTION_BLOCK tipper

// Define input variables
VAR_INPUT
    cpu_cores : REAL;
    cpu_threads : REAL;
    cpu_tdp : REAL;
    ram_capacity_in_gb : REAL;
    ram_speed : REAL;
    ram_voltage : REAL;
    gpu_memory_in_gb : REAL;
    gpu_clock_in_mhz : REAL;
    psu_output_power : REAL;
    hdd_capacity_in_gb : REAL;
END_VAR

// Define output variable
VAR_OUTPUT
    app_development : REAL;
    gaming : REAL;
    crypto_mining : REAL;
    home : REAL;
    business : REAL;
    hosting : REAL;
END_VAR

// Fuzzify input variable 'cpu_cores'
FUZZIFY cpu_cores
    TERM poor := (2, 1) (4, 1) (6, 0);
    TERM good := (6, 0) (8,1) (16,1) (18,0);
    TERM excellent := (16, 0) (18, 1) (64, 1);
END_FUZZIFY

// Fuzzify input variable 'cpu_threads'
FUZZIFY cpu_threads
    TERM poor := (2, 1) (4, 1) (8, 0);
    TERM good := (8, 0) (12,1) (28,1) (32,0);
    TERM excellent := (32, 0) (80, 1) (128, 0);
END_FUZZIFY

// Fuzzify input variable 'cpu_tdp'
FUZZIFY cpu_tdp
    TERM poor := (4.5, 1) (45, 1) (60, 0);
    TERM good := (55, 0) (65, 1) (80, 1) (105, 0);
    TERM excellent := (100, 0) (105, 1) (350, 1);
END_FUZZIFY

// Fuzzify input variable 'ram_capacity_in_gb'
FUZZIFY ram_capacity_in_gb
    TERM poor := (1, 1) (4, 1) (6, 0);
    TERM good := (6, 0) (8, 1) (28, 1) (32, 0);
    TERM excellent := (32, 0) (80, 1) (128, 0);
END_FUZZIFY

// Fuzzify input variable 'ram_speed'
FUZZIFY ram_speed
    TERM poor := (1, 1) (4, 1) (6, 0);
    TERM good := (6, 0) (8, 1) (28, 1) (32, 0);
    TERM excellent := (32, 0) (80, 1) (128, 0);
END_FUZZIFY


// Fuzzify input variable 'food'
FUZZIFY food
    TERM rancid := (0, 1) (1, 1) (3,0) ;
    TERM delicious := (7,0) (9,1);
END_FUZZIFY

// Defzzzify output variable 'tip'
DEFUZZIFY tip
    TERM cheap := (0,0) (5,1) (10,0);
    TERM average := (10,0) (15,1) (20,0);
    TERM generous := (20,0) (25,1) (30,0);
    // Use 'Center Of Gravity' defuzzification method
    METHOD : COG;
    // Default value is 0 (if no rule activates defuzzifier)
    DEFAULT := 0;
END_DEFUZZIFY

RULEBLOCK No1
    // Use 'min' for 'and' (also implicit use 'max'
    // for 'or' to fulfill DeMorgan's Law)
    AND : MIN;
    // Use 'min' activation method
    ACT : MIN;
    // Use 'max' accumulation method
    ACCU : MAX;

    RULE 1 : IF service IS poor OR food IS rancid
                THEN tip IS cheap;

    RULE 2 : IF service IS good
                THEN tip IS average;

    RULE 3 : IF service IS excellent AND food IS delicious
                THEN tip is generous;
END_RULEBLOCK

END_FUNCTION_BLOCK